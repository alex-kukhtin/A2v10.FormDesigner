!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";const t={Grid:["Height","CssClass"],TextBox:["Data","Label","Width"],DatePicker:["Data","Label","Width"],PeriodPicker:["Data","Label","Width"],Selector:["Data","Label","Width"],DataGrid:["Data","Height"],Label:["Label"],Panel:["Label"],DataGridColumn:["Data","Label"],Toolbar:["CssClass"],Tabs:["CssClass"],Pager:["Data"],Dialog:["Label","Width","Height","Data"],Page:["Label","Data","CssClass","UseCollectionView"],Button:["Label","CssClass","If"],GRID_PROPS:["Row","Col","RowSpan","ColSpan"],COMMAND_PROPS:["Command","Argument","Url"],OTHER_PROPS:{Grid:["Rows","Columns"]}};var e={template:'\n<div class="fd-taskpad">\n\t<ul class="fd-tabbar">\n\t\t<li :class="{active: activeTab === \'tbox\'}" @click.stop.prevent="activeTab = \'tbox\'">Toolbox</li>\n\t\t<li :class="{active: activeTab === \'props\'}" @click.stop.prevent="activeTab = \'props\'">Properties</li>\n\t</ul>\n\t<toolbox v-if="activeTab === \'tbox\'" :fields=fields :cont=cont :components=components />\n\t<propsheet v-if="activeTab === \'props\'" :item=item :host=host />\n</div>\n',props:{item:Object,fields:Array,components:Array,cont:Object,host:Object},components:{toolbox:{template:'\n<div class="fd-toolbox">\n\t<details open>\n\t\t<summary>Form Controls</summary>\n\t\t<ul>\n\t\t\t<toolboxitem v-for="(f, ix) in components" :key=ix :item=f :label=f.Is :cont=cont />\n\t\t</ul>\n\t</details>\n\t<details open>\n\t\t<summary>Data</summary>\n\t\t<ul>\n\t\t\t<toolboxitem v-for="(f, ix) in fields" :key=ix :item=f :label=f.Data :cont=cont />\n\t\t</ul>\n\t</details>\n</div>\n',components:{toolboxitem:{template:'\n<li class="fd-tbox-item" :draggable="true" @dragstart.stop=dragStart>\n\t<i class="ico ico-grid" />\n\t<span v-text=label />\n</li>\n',props:{icon:String,label:String,item:Object,cont:Object},methods:{dragStart(t){console.dir(this.cont),this.cont.select(this.item),t.dataTransfer.effectAllowed="move"}}}},props:{fields:Array,components:Array,cont:Object},computed:{},methods:{}},propsheet:{template:'\n<div class="fd-propsheet">\n\t<div class="fd-item-is" v-text="item.Is" />\n\t<table>\n\t\t<tr>\n\t\t\t<td colspan=2 class="fd-ps-header">General</td>\n\t\t</tr>\n\t\t<tr v-for="(p, ix) in itemProps" :key="\'i:\'+ix">\n\t\t\t<td v-text="p.name" />\n\t\t\t<td>\n\t\t\t\t<input v-model.lazy.trim="p.value" />\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr v-for="(p, ix) in otherProps" :key="\'o:\'+ix">\n\t\t\t<td v-text="p.name" />\n\t\t\t<td>\n\t\t\t\t<input v-model.lazy.trim="p.value" />\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr v-if="item.Grid">\n\t\t\t<td colspan=2 class="fd-ps-header">Grid</td>\n\t\t</tr>\n\t\t<tr v-if="item.Grid" v-for="(p, ix) in gridProps" :key="\'g:\' + ix">\n\t\t\t<td v-text="p.name"/>\n\t\t\t<td>\n\t\t\t\t<input v-model.lazy.trim="p.value" type=number />\n\t\t\t</td>\n\t\t</tr>\n\t\t<tr v-if="item.Command">\n\t\t\t<td colspan=2 class="fd-ps-header">Command</td>\n\t\t</tr>\n\t\t<tr v-if="item.Command" v-for="(p, ix) in commandProps" :key="\'c:\' + ix">\n\t\t\t<td v-text="p.name"/>\n\t\t\t<td>\n\t\t\t\t<input v-model.lazy.trim="p.value" />\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n</div>\n',props:{item:Object,host:Object},computed:{itemProps(){if(!this.item)return[];const e=this.item.Is;return this.getProps(t[e],this.item)},otherProps(){if(!this.item)return[];const e=this.item.Is;return this.getProps(t.OTHER_PROPS[e],this.item.Props||{})},gridProps(){return this.item.Grid?this.getProps(t.GRID_PROPS,this.item.Grid||{}):[]},commandProps(){return this.item.Command?this.getProps(t.COMMAND_PROPS,this.item.Command||{}):[]}},methods:{setDirty(){this.host&&this.host.setDirty()},getProps(t,e){if(!t)return[];let s=this;return t.map((t=>({name:t,get value(){return e[t]||""},set value(i){Vue.set(e,t,i),s.setDirty()}})))}}}},data:()=>({activeTab:"tbox"}),computed:{props(){return this.item?this.item.Props:[]}},methods:{}};var s={template:'\n<div class="toolbar fd-toolbar">\n\t<button class="btn btn-tb btn-icon" @click="clickCmd(\'save\')" :disabled="disabled()">\n\t\t<i class="ico ico-save-outline" />\n\t</button>\n\t<button class="btn btn-tb btn-icon" @click=deleteItem >\n\t\t<i class="ico ico-clear" />\n\t</button>\n\t<div class="divider" />\n\t<button class="btn btn-tb btn-icon" @click="clickCmd(\'reload\')">\n\t\t<i class="ico ico-reload" />\n\t</button> \n</div>\n',props:{host:Object},methods:{clickCmd(t){this.host&&this.host.exec(t)},deleteItem(){this.$parent.deleteItem()},disabled(){return!this.host||!this.host.isDirty()}}};var i={template:'\n<div class="fd-grid-ph" :style="style"\n\t@drop=drop @dragover=dragOver @dragenter=dragEnter @dragleave=dragLeave\n\t\t:class="{hover}"/>\n',props:{row:Number,col:Number,cont:Object},data:()=>({hover:!1}),computed:{style(){return`grid-area: ${this.row} / ${this.col}`}},methods:{dragOver(t){this.cont.canDrop("grid")&&t.preventDefault()},dragEnter(t){this.hover=!0},dragLeave(t){this.hover=!1},drop(t){this.hover=!1,this.cont.drop({row:this.row,col:this.col,grid:this.$parent.item})}}},n={props:{item:Object,cont:Object},computed:{controlStyle(){return{width:this.item.Width||""}}}};var o={template:'\n<div class="control-group" :style=controlStyle >\n<label v-text="item.Label" v-if="item.Label" />\n\t<div class="input-group">\n\t\t<span v-text="item.Data" class="input" />\n\t</div>\n</div>\n',extends:n};var a={template:'\n<div class="control-group" :style=controlStyle >\n<label v-text="item.Label" v-if="item.Label"/>\n\t<div class="input-group">\n\t\t<span v-text="item.Data" class="input" />\n\t\t<a>\n\t\t\t<i class="ico ico-search" />\n\t\t</a>\n\t</div>\n</div>\n',extends:n};var r={template:'\n<div class="control-group" :style=controlStyle >\n\t<label v-text="item.Label" v-if="item.Label"/>\n\t<div class="input-group">\n\t\t<span v-text="item.Data" class="input text-center"/>\n\t\t<a>\n\t\t\t<i class="ico ico-calendar" />\n\t\t</a>\n\t</div>\n</div>\n',extends:n};var l={template:'\n<div class="control-group period-picker" :style=controlStyle >\n\t<label v-text="item.Label" v-if="item.Label"/>\n\t<div class="input-group">\n\t\t<span v-text="item.Data" class="input text-center"/>\n\t\t<span class="caret" />\n\t</div>\n</div>\n',extends:n},c={props:{item:Object,cont:Object},methods:{select(){this.cont.select(this.item)}},computed:{selected(){return this.cont.isActive(this.item)}}};var d={template:'\n<div class="fd-datagrid" @dragover=dragOver @drop=drop :style=elemStyle >\n\t<table>\n\t\t<tr>\n\t\t\t<DataGridColumn v-for="(c, ix) in item.Items" :item=c :key=ix :cont=cont />\n\t\t</tr>\n\t</table>\n\t<div class="fd-grid-handle">▷</div>\n</div>\n',props:{item:Object,cont:Object},components:{DataGridColumn:{template:'\n<td class="fd-datagrid-column" @click.stop.prevent="select" :class="{ selected }"\n\t:draggable=true @dragstart.stop=dragStart>\n\t<div v-text="item.Label" class="label" />\n\t<div v-text="item.Data" class="column" />\n</td>\n',extends:c,methods:{dragStart(t){console.dir("drag start column"),this.cont.select(this.item),t.dataTransfer.effectAllowed="move",t.dataTransfer.setData("text/plain",JSON.stringify({row:this.row,col:this.col}))}}}},methods:{dragOver(t){t.preventDefault()},drop(t){alert("drop data grid")}},computed:{elemStyle:()=>({})}},m={template:'<div class="a2-pager">\n\t\t<button>\n\t\t\t<i class="ico ico-chevron-left" />\n\t\t</button>\n\t\t<button class="active">1</button>\n\t\t<button>2</button>\n\t\t<button>3</button>\n\t\t<button>4</button>\n\t\t<button>5</button>\n\t\t<span class="a2-pager-dots">...</span>\n\t\t<button>8</button>\n\t\t<button>\n\t\t\t<i class="ico ico-chevron-right" />\n\t\t</button>\n\t\t<div class="a2-pager-divider" />\n\t\t<span class="a2-pager-title">items: <b>1</b>-<b>20</b> of <b>500</b></span>\n\t</div>',props:{item:Object,cont:Object}};const p={Edit:"ico-edit",EditSelected:"ico-edit",New:"ico-add",Save:"ico-save-outline",SaveAndClose:"ico-save-close-outline",Apply:"ico-apply",UnApply:"ico-unapply",Create:"ico-add",Delete:"ico-clear",Reload:"ico-reload",Print:"ico-print"};var v={template:'\n<button class="btn btn-tb" @click.stop.prevent="select" :class="{ selected }" :draggable=true\n\t\t@dragstart.stop=dragStart >\n\t<i class="ico" :class=icon />\n\t<span v-if="item.Label" v-text="item.Label" />\t\n</button>\n',extends:c,computed:{icon(){return p[this.item.Command.Command]||"ico-menu"}},methods:{dragStart(t){console.dir("drag start button"),this.cont.select(this.item),t.dataTransfer.effectAllowed="move",t.dataTransfer.setData("text/plain",this.item.Is)}}};var h={template:'\n<div class="aligner" @click.stop.prevent="select" :class="{ selected }" :draggable=true\n\t\t@dragstart.stop=dragStart >\n</div>\n',extends:c,methods:{dragStart(t){console.dir("drag start aligner"),this.cont.select(this.item),t.dataTransfer.effectAllowed="move",t.dataTransfer.setData("text/plain",this.item.Is)}}};var b={searchBox:{template:'\n<div class="control-group" :style=controlStyle @click=itemClick :class="{ selected }">\n<label v-text="item.Label" v-if="item.Label"/>\n\t<div class="input-group">\n\t\t<span v-text="item.Data" class="input" />\n\t\t<a v-if="icon">\n\t\t\t<i class="ico" :class="icon" />\n\t\t</a>\n\t</div>\n</div>\n',extends:n,computed:{icon(){return"SearchBox"===this.item.Is?"ico-search":""},controlStyle(){},selected(){return this.cont.isActive(this.item)}},methods:{itemClick(t){t.preventDefault(),t.stopPropagation(),this.cont.select(this.item)}}},checkBox:{template:'\n<label class="checkbox" :label="item.Label" :style=controlStyle >\n\t<input type="checkbox" xcheck="true" checked />\n\t<span v-text=item.Label />\n</label>\n',extends:n}},u={template:'<div class="toolbar" @dragover=dragOver @drop=drop >\n\t\t<component :is="item.Is" v-for="(item, ix) in item.Items" :item="item" :key="ix" :cont=cont />\n\t\t<div v-if="!isPage" class="fd-grid-handle">▷</div>\n\t</div>',extends:c,props:{isPage:Boolean},components:{Button:v,Aligner:h,TextBox:o,SearchBox:b.searchBox},methods:{dragOver(t){t.preventDefault()},drop(t){alert("drop toolbar")}}};var f={name:"grid",extends:c,template:'\n<div class="fd-elem-grid grid" @click.stop=select :style=gridStyle :class="{selected}">\n\t<template v-for="row in rows">\n\t\t<fd-grid-ph v-for="col in cols" :row=row :col="col" ref=ph\n\t\t\t:key="row + \':\' + col" :cont=cont />\n\t</template>\n\t<fd-grid-item v-for="(itm, ix) in item.Items" :item=itm :key=ix :cont=cont />\n\t<div class="fd-grid-handle">▷</div>\n</div>\n',components:{"fd-grid-ph":i,"fd-grid-item":{template:'\n<div class="fd-grid-item" :draggable="true"\n\t@dragstart.stop=dragStart @dragend=dragEnd\n\t:style="style" @click.stop.prevent=select :class="{ selected }">\n\t\t<component :is="item.Is" :item="item" :cont="cont" />\n</div>\n',props:{item:Object,cont:Object},components:{TextBox:o,Selector:a,DatePicker:r,PeriodPicker:l,DataGrid:d,CheckBox:b.checkBox,Label:{template:'<label v-text="item.Label" />',extends:n},Header:{template:'<div class="a2-header" v-text="item.Label" />',extends:n},Pager:m,Toolbar:u,Tabs:{template:'\n<div class="fd-elem-tabs a2-tab-bar">\n\t<div class="a2-tab-bar-item active" v-for="(itm, ix) in item.Items" :key=ix>\n\t\t<a class="a2-tab-button active">\n\t\t\t<span class="content" v-text="itm.Label" />\n\t\t</a>\n\t</div>\n\t<div class="fd-grid-handle">▷</div>\n</div>\n',props:{item:Object,cont:Object}}},computed:{grid(){return this.item.Grid||{}},row(){return this.grid.Row||""},col(){return this.grid.Col||""},rowSpan(){return this.grid.RowSpan||""},colSpan(){return this.grid.ColSpan||""},style(){let t=this.row;this.rowSpan&&(t+=`/ span ${this.rowSpan}`);let e=this.col;return this.colSpan&&(e+=`/ span ${this.colSpan}`),{gridRow:t,gridColumn:e,height:this.item.Height||""}},isSameSelected(){return"Grid"==this.item.Is},selected(){if(!this.isSameSelected)return this.cont.isActive(this.item)}},methods:{select(){this.cont.select(this.item)},dragStart(t){console.dir("drag start"),this.cont.select(this.item),t.dataTransfer.effectAllowed="move",t.dataTransfer.setData("text/plain",JSON.stringify({row:this.row,col:this.col}))},dragEnd(){console.dir("drag end")}}}},props:{item:Object,cont:Object},computed:{props(){return this.item.Props||{}},cols(){return this.props.Columns?this.props.Columns.split(" ").map(((t,e)=>e+1)):1},rows(){return this.props.Rows?this.props.Rows.split(" ").map(((t,e)=>e+1)):1},gridStyle(){return{gridTemplateColumns:this.props.Columns||"auto",gridTemplateRows:this.props.Rows||"auto",height:this.item.Height||""}}}},g={template:'<div class="line" @click.stop.prevent=select :class="{selected}"><hr></div>',extends:c};var x={template:'<div class="modal-footer" @dragover=dragOver @drop=drop >\n\t\t<component :is="itm.Is" v-for="(itm, ix) in elems"\n\t\t\t:item="itm" :key="ix" :cont=cont />\n\t</div>',extends:n,props:{elems:Array},components:{Button:{template:'\n<button @click.stop.prevent="select" class="btn a2-inline" :class="btnClass" :draggable=true\n\t@dragstart.stop=dragStart v-text="item.Label">\n</button>\n',extends:c,computed:{btnClass(){return{selected:this.selected,"btn-primary":"Primary"===this.item.Props?.Style}}},methods:{dragStart(t){console.dir("drag start button"),this.cont.select(this.item),t.dataTransfer.effectAllowed="move",t.dataTransfer.setData("text/plain",this.item.Is)}}}},methods:{dragOver(t){t.preventDefault()},drop(t){alert("drop toolbar")}}};var y={template:'\n<div class="fd-elem-taskpad"  @click.stop=select :class="{selected}">\n\t<component v-for="(itm, ix) in item.Items" :key="ix" :is="itm.Is"\n\t\t:item="itm" :cont=cont />\n</div>\n',extends:c,components:{Panel:{template:'\n<div class="fd-panel panel panel-transparent" @click.stop=select :class="{selected}">\n\t<div class="panel-header">\n\t\t<div v-text="item.Label" class="panel-header-slot" />\n\t\t<span class="ico panel-collapse-handle" />\n\t</div>\n\t<component v-for="(itm, ix) in item.Items" :key="ix" :is="itm.Is"\n\t\t:item="itm" :cont=cont />\n</div>\n',extends:c,props:{item:Object,cont:Object}}},props:{item:Object,cont:Object}};Vue.component("Grid",f),Vue.component("fd-container",{template:'\n<div class="fd-container" @keyup.self=keyUp tabindex=0 >\n\t<fd-toolbar :host=host></fd-toolbar>\n\t<fd-taskpad :item=selectedItem :fields=fields :cont=cont :components=components :host=host />\n\t<div class="fd-main" @click.stop.stop=clickBody>\n\t\t<div class=fd-body  @click.stop.stop=clickBody :class="bodyClass" :style="bodyStyle">\n\t\t\t<div v-if="isDialog" class="modal-header">\n\t\t\t\t<span class="modal-title" v-text="form.Label"/>\n\t\t\t\t<button tabindex="-1" class="btnclose">✕</button>\n\t\t\t</div>\n\t\t\t<div v-if="isPage" class="fd-tabs-header">\n\t\t\t\t<div class="fd-tab-title" v-text="form.Label"/>\n\t\t\t</div>\n\t\t\t<div class="fd-content">\n\t\t\t\t<div v-if="form.Toolbar" class="form-toolbar">\n\t\t\t\t\t<Toolbar :item="form.Toolbar" :cont=cont class="page-toolbar" :is-page="true"/>\n\t\t\t\t</div>\n\t\t\t\t<component v-for="(itm, ix) in form.Items" :key="ix" :is="itm.Is"\n\t\t\t\t\t:item="itm" :cont=cont />\n\t\t\t\t<Taskpad :item="form.Taskpad" :cont=cont v-if="form.Taskpad" />\n\t\t\t</div>\n\t\t\t<dlg-buttons v-if="isDialog" :elems="form.Buttons" :cont=cont />\n\t\t</div>\n\t</div>\n</div>\n',components:{"fd-toolbar":s,"fd-taskpad":e,"dlg-buttons":x,HLine:g,Taskpad:y,Toolbar:u},props:{form:Object,fields:Array,components:Array,host:Object},data:()=>({selectedItem:null}),computed:{cont(){return{select:this.$selectItem,drop:this.$dropItem,isActive:t=>t===this.selectedItem,canDrop:this.$canDrop}},bodyClass(){return this.form.Is.toLowerCase()},bodyStyle(){let t={};return this.isDialog&&(t.width=this.form.Width),t},isDialog(){return"Dialog"===this.form.Is},isPage(){return"Page"===this.form.Is}},methods:{clickBody(){this.selectedItem=this.form},setDirty(){this.host&&this.host.setDirty()},keyUp(t){if(console.dir(t.which),46===t.which)this.deleteItem()},deleteItem(){if(!this.selectedItem)return;let t=this.findGridByItem(this.selectedItem);if(!t||"Grid"!==t.Is)return;let e=t.Items.indexOf(this.selectedItem);e<0||(t.Items.splice(e,1),this.selectedItem=this.form,this.setDirty())},findGridByItem(t){return function t(e,s){if(!e||!e.Items)return null;for(let i=0;i<e.Items.length;i++){let n=e.Items[i];if(n===s)return e;if("Grid"!==n.Is)continue;let o=t(n,s);if(o)return o}return null}(this.form,t)},$selectItem(t){this.selectedItem=t},$canDrop(t){let e=this.selectedItem;return!!e&&(console.dir(e.Is),"grid"!==t||"Button"!==e.Is&&"DataGridColumn"!==e.Is)},$dropItem(t){if(!this.selectedItem)return;console.dir(this.selectedItem),console.dir(t);let e=this.selectedItem||{};if(!e.Grid){let e=Object.assign({},this.selectedItem);return e.Items=[],e.Grid={Row:t.row,Col:t.col},t.grid.Items.push(e),this.selectedItem=e,void this.setDirty()}let s=this.findGridByItem(this.selectedItem);if(s&&"Grid"===s.Is&&s!==t.grid){let e=s.Items.indexOf(this.selectedItem);s.Items.splice(e,1),t.grid.Items.push(this.selectedItem)}this.selectedItem.Grid={Row:t.row,Col:t.col,ColSpan:e.ColSpan,RowSpan:e.RowSpan},this.setDirty()}},mounted(){this.selectedItem=this.form}})}));
//# sourceMappingURL=formdesigner.min.js.map
